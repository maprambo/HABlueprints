blueprint:
  name: "Motion-activated light with actions"
  domain: automation
  description: "Runs a series of action for a light based on a motion sensor, depending on environmental lighting and including a manual override"
  input:
    motion_sensor:
      name: "Motion sensor"
      description: "A binary sensor that detects motion"
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
    automation_active:
      name: "Automation active (manual override)"
      description: "An input boolean to turn the motion sensoring on or off"
      selector:
        entity:
          domain: input_boolean
    darkness:
      name: "Darkness boolean"
      description: "A binary sensor to indicate darkness. Use a threshold helper if necessary."
      selector:
        entity:
          domain: binary_sensor
    window_contact:
      name: "Window contact(s)"
      description: "Optionally provided window sensors will dim the light or keep it turned off if a window is open to keep insects out"
      selector:
        entity:
          domain: binary_sensor
          multiple: true
      default: []
    main_light:
      name: "Main light"
      description: "The main light entity to check state on"
      selector:
        entity:
          domain: light
    target_lights:
      name: "Target lights"
      description: "Lights to turn on/off"
      selector:
        target:
          entity:
            domain: light
    boolean_turn_off_lights:
      name: "Turn off lights automatically"
      selector:
        boolean:
    duration_turn_off_lights:
      name: "Timespan to turn off lights"
      description: "Automatically turn off lights after this time"
      selector:
        duration:
    boolean_turn_on_automation_active_time:
      name: "Turn manual control back on"
      description: "Turn on the manual override entity again automatically"
      selector:
        boolean:
    duration_turn_on_automation_active:
      name: "Timespan to turn manual control back on"
      description: "Turn on the manual override entity again if no movement was detected after this timespan"
      selector:
        duration:
    sequence_turn_on_light:
      name: "Action to turn on light"
      description: "Activate a scene, a script or check for more conditions"
      selector:
        action:
mode: queued
trigger:
  - id: "motion_detected"
    platform: state
    entity_id: !input motion_sensor
    from: "off"
    to: "on"
  - id: "no_motion_detected"
    platform: state
    entity_id: !input motion_sensor
    from: "on"
    to: "off"
    for: !input duration_turn_off_lights
  - id: "darkness_on"
    platform: state
    entity_id: !input darkness
    from: "off"
    to: "on"
  - id: "darkness_off"
    platform: state
    entity_id: !input darkness
    from: "on"
    to: "off"
  - id: "light_turned_off"
    platform: state
    entity_id: !input main_light
    from: "on"
    to: "off"
  - id: "light_turned_on"
    platform: state
    entity_id: !input main_light
    from: "off"
    to: "on"
  - id: "automation_active_on"
    platform: state
    entity_id: !input automation_active
    from: "off"
    to: "on"
  - id: "manual_override_reset_by_no_motion"
    platform: state
    entity_id: !input motion_sensor
    from: "on"
    to: "off"
    for: !input duration_turn_on_automation_active
  - id: "manual_override_reset_by_no_darkness"
    platform: state
    entity_id: !input darkness
    from: "on"
    to: "off"
    for: !input duration_turn_on_automation_active
  - id: "window_opens"
    platform: state
    entity_id: !input window_contact
    from: "off"
    to: "on"
  - id: "window_closes"
    platform: state
    entity_id: !input window_contact
    from: "on"
    to: "off"
variables:
    boolean_turn_off_lights: !input boolean_turn_off_lights
    boolean_turn_on_automation_active_time: !input boolean_turn_on_automation_active_time
    motion_sensor: !input motion_sensor
    main_light: !input main_light
    target_lights: !input target_lights
    window_contact: !input window_contact
action:
  - choose:
    - conditions:
# Run the given actions `sequence_turn_on_light` when motion is detected and it is dark.
      - condition: or
        conditions:
        - "{{ trigger.id == 'motion_detected' }}"
        - "{{ trigger.id == 'darkness_on' }}"     # Also turn on light when it gets dark meanwhile present
      - condition: state
        entity_id: !input darkness
        state: "on"
      - condition: not
        conditions:
        - condition: state
          entity_id: !input motion_sensor
          state: "off"                            # Check presence int the last given minutes
          for: !input duration_turn_off_lights
      - condition: or
        conditions:
        - "{{ not window_contact }}"
        - condition: state
          entity_id: !input window_contact
          state: "off"
      - condition: state                        # Don't run the actions, when a specific light scene is already set
        entity_id: !input main_light
        state: "off"
      - condition: state
        entity_id: !input automation_active
        state: "on"
      sequence: !input sequence_turn_on_light
    - conditions:
# Revert the light when window closes
      - "{{ trigger.id == 'window_closes' }}"
      - condition: numeric_state                      # As long as it's the insect light or at least dark
        entity_id: !input main_light
        attribute: "brightness"
        below: 20
      - condition: or
        conditions:
        - "{{ not window_contact }}"
        - condition: and
          conditions:
          - condition: state
            entity_id: !input window_contact
            state: "off"
      sequence:
      - service: scene.turn_on
        target:
          entity_id: "scene.snaphot_{{ this.entity_id.split('.')[1] }}"
      - delay: 1
      - service: scene.turn_on
        target:
          entity_id: "scene.snaphot_{{ this.entity_id.split('.')[1] }}"
    - conditions:
# Turn off the light when it gets bright or the motion is not detected no more
      - condition: or
        conditions:
        - "{{ trigger.id == 'no_motion_detected' }}"
        - "{{ trigger.id == 'darkness_off' }}"
        - "{{ trigger.id == 'automation_active_on' }}" # Turn off the light if automation is turned on                  
      - condition: or
        conditions:
        - condition: state
          entity_id: !input darkness
          state: "off"
        - condition: state
          entity_id: !input motion_sensor
          state: "off"                            # Check presence int the last given minutes
          for: !input duration_turn_off_lights
        - condition: and
          conditions:
          - "{{ not not window_contact }}"
          - condition: state
            entity_id: !input window_contact
            state: "on"
      - condition: state
        entity_id: !input automation_active
        state: "on"
      - "{{ boolean_turn_off_lights }}"
      - condition: state
        entity_id: !input main_light
        state: "on"
        for: "00:00:03"
      sequence:
      - service: light.turn_off
        target: !input target_lights
        data:
          transition: 10
# Turn on the automation if the light is turned on in presence (leave off if activated from another place)
    - conditions:
      - "{{ trigger.id == 'light_turned_on' }}"
      - condition: state
        entity_id: !input motion_sensor
        state: "on"
      sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: !input automation_active
# Turn on the automation if the light is turned off in brightness
    - conditions:
      - "{{ trigger.id == 'light_turned_off' }}"
      - condition: or
        conditions:
        - condition: state
          entity_id: !input darkness
          state: "off"
        - condition: state
          entity_id: !input motion_sensor
          state: "off"                            # Check presence int the last given minutes
          for: !input duration_turn_off_lights
        - condition: and
          conditions:
          - "{{ not not window_contact }}"
          - condition: state
            entity_id: !input window_contact
            state: "on"
      sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: !input automation_active
# Turn off the automation if the light is turned off despite motion and darkness
    - conditions:
      - "{{ trigger.id == 'light_turned_off' }}"
      - condition: state
        entity_id: !input darkness
        state: "on"
      - condition: not
        conditions:
        - condition: state
          entity_id: !input motion_sensor
          state: "off"                            # Check presence int the last given minutes
          for: !input duration_turn_off_lights
      - condition: state                          # When it's dark, but not triggered by darkness
        entity_id: !input darkness
        state: "on"
        for: "00:00:03"
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id: !input automation_active
# Turn off the automation if the light is turned on from another place
    - conditions:
      - "{{ trigger.id == 'light_turned_on' }}"
      - condition: state
        entity_id: !input motion_sensor
        state: "off"
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id: !input automation_active
# Turn on automation after given time of unpresence
    - conditions:
      - condition: or
        conditions:
        - "{{ trigger.id == 'manual_override_reset_by_no_darkness' }}"
        - "{{ trigger.id == 'manual_override_reset_by_no_motion' }}"
      - "{{ boolean_turn_on_automation_active_time }}"
      sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: !input automation_active
# Dim light when window opens
    - conditions:
      - "{{ trigger.id == 'window_opens' }}"
      - condition: state
        entity_id: !input main_light
        state: "on"
      - condition: numeric_state
        entity_id: !input main_light
        attribute: brightness
        above: 19
      - condition: state
        entity_id: !input darkness
        state: "on"
      sequence:
      - service: scene.create
        data:
          scene_id: "snaphot_{{ this.entity_id.split('.')[1] }}"
          snapshot_entities: " {{ target_lights.entity_id }} "
      - service: light.turn_on
        data:
          brightness: 5
          hs_color:
            - 0
            - 100
        target: !input target_lights  # Tradfri Bug: Repeat when color and brightness change
      - delay: 1
      - service: light.turn_on
        data:
          brightness: 5
          hs_color:
            - 0
            - 100
        target: !input target_lights