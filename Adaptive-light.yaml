blueprint:
  name: "Adaptive Lighting"
  domain: automation
  description: "Light to follow natural cycle"
  input:
    sunrise_time:
      name: "Sunrise time"
      selector:
        time:
    sunset_time:
      name: "Sunset time"
      selector:
        time:
    lights:
      name: "Target lights"
      selector:
        entity:
          domain: light
          multiple: true
    brightness_midday:
      name: "Brightness at midday"
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider
          step: 1
      default: 100
    brightness_midnight:
      name: "Brightness at midnight"
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider
          step: 1
      default: 2
    temperature_midday:
      name: "Temperature at midday"
      selector:
        number:
          min: 153
          max: 500
          unit_of_measurement: "Mireds"
          mode: slider
          step: 1
      default: 153
    temperature_midnight:
      name: "Temperature at midnight"
      selector:
        number:
          min: 153
          max: 500
          unit_of_measurement: "Mireds"
          mode: slider
          step: 1
      default: 500
    brightness_factor:
      name: "Brightness factor"
      description: "Factor for brightness throughout the day"
      selector:
        number:
          min: 1.0
          max: 3.0
          mode: slider
          step: 0.01
      default: 1.05
mode: queued
max: 10
trigger:
  - id: "time_pattern"
    platform: time_pattern
    minutes: "/1"
  - id: "light_turned_on"
    platform: event
    event_type: call_service
    event_data:
      domain: light
      service: turn_on
variables:
  lights: !input lights
  brightness_midday: !input brightness_midday
  brightness_midnight: !input brightness_midnight
  temperature_midday: !input temperature_midday
  temperature_midnight: !input temperature_midnight
  brightness_factor: !input brightness_factor
  sunrise: !input sunrise_time
  sunset: !input sunset_time
action:
- variables:
    interval_sec: 60
    params_day_length: "{{ (today_at(sunset) - today_at(sunrise)).seconds / (24*60*60) }}"
    params_x_sunrise: "{{ (today_at(sunrise) - today_at('00:00:00')).seconds / (24*60*60) }}"
    params_meridian: "{{ params_x_sunrise + (params_day_length / 2) }}"
    params_x: "{{ (now() - today_at('00:00:00')).seconds / (24*60*60) }}"
    params_x_old: "{{ params_x - (interval_sec / (24*60*60)) }}"
    params_c: "{{ -0.5 * cos(2*pi*(params_day_length/2)) }}"
    params_y: "{{ 0.5 * cos(2*pi*(params_x - params_meridian)) + params_c + 0.5 }}"
    params_y_old: "{{ 0.5 * cos(2*pi*(params_x_old - params_meridian)) + params_c + 0.5 }}"
- variables:
    params_y: "{{ params_y if params_y > 0 else 0 }}"
- variables:
    params_y: "{{ params_y if params_y < 1 else 1 }}"
- variables:
    params_y_product: "{{ params_y * brightness_factor }}"
- variables:
    params_y_product: "{{ params_y_product if params_y_product < 1 else 1 }}"
- variables:
    params_y_old: "{{ params_y_old if params_y_old > 0 else 0 }}"
- variables:
    params_y_old: "{{ params_y_old if params_y_old < 1 else 1 }}"
- variables:
    params_y_old_product: "{{ params_y_old * brightness_factor }}"
- variables:
    params_y_old_product: "{{ params_y_old_product if params_y_old_product < 1 else 1 }}"
- variables:
    light_setting_current_brightness: "{{ (params_y_product * (brightness_midday - brightness_midnight) + brightness_midnight) / 100 * 255 | int }}"
- variables:
    light_setting_current_temperature: "{{ (temperature_midnight - params_y * (temperature_midnight - temperature_midday)) | int }}"
- variables:
    light_setting_old_brightness: "{{ (params_y_old_product * (brightness_midday - brightness_midnight) + brightness_midnight) / 100 * 255 | int }}"
- variables:
    light_setting_old_temperature: "{{ (temperature_midnight - params_y_old * (temperature_midnight - temperature_midday)) | int }}"
- variables:
    targets: "{{ [lights] if lights is string else lights }}"
- variables:
    targets_brightness: >-
      {%- set target_entities = namespace(brightness=[]) %}
      {%- for target in targets %}
      {%- if states(target) == 'on' %}
      {%- if not not state_attr(target, 'brightness') and state_attr(target, 'color_mode') == 'color_temp' and state_attr(target, 'brightness') > light_setting_old_brightness - 1 and state_attr(target, 'brightness') < light_setting_current_brightness + 1 %}
      {%- set target_entities.brightness = target_entities.brightness + [target] %}
      {%- endif %}
      {%- endif %}
      {%- endfor %}
      {{ target_entities.brightness }}
  
    targets_temperature: >-
      {%- set targets = lights %}
      {%- set targets = [targets] if targets is string else targets %}
      {%- set target_entities = namespace(temperature=[]) %}
      {%- for target in targets %}
      {%- if states(target) == 'on' %}
      {%- if not not state_attr(target, 'color_temp') and state_attr(target, 'color_mode') == 'color_temp' and state_attr(target, 'color_temp') > light_setting_old_temperature - 1 and state_attr(target, 'color_temp') < light_setting_current_temperature + 1 %}
      {%- set target_entities.temperature = target_entities.temperature + [target] %}
      {%- endif %}
      {%- endif %}
      {%- endfor %}
      {{ target_entities.temperature }}
- choose:
  - conditions:
    - condition: or
      conditions:
      - condition: and
        conditions:
        - "{{ trigger.id == 'time_pattern' }}"
    sequence:
    - service: light.turn_on
      data:
        transition: 0
      data_template:
        brightness: "{{ light_setting_current_brightness }}"
      target:
        entity_id: "{{ targets_brightness }}"
    - service: light.turn_on
      data:
        transition: 0
      data_template:
        color_temp: "{{ light_setting_current_temperature }}"
      target:
        entity_id: "{{ targets_temperature }}"
  - conditions:
    - "{{ trigger.id == 'light_turned_on' }}"
    - "{{ trigger.event.data.service_data.entity_id is in targets }}"
    - "{{ states(trigger.event.data.service_data.entity_id) == 'off' or (now() - states[trigger.event.data.service_data.entity_id].last_changed).seconds > 3 }}"
    - "{{ not 'white' is in trigger.event.data.service_data }}"
    - "{{ not 'profile' is in trigger.event.data.service_data }}"
    - "{{ not 'flash' is in trigger.event.data.service_data }}"
    - "{{ not 'effect' is in trigger.event.data.service_data }}"
    sequence:
    - choose:
      - conditions:
        - "{{ not 'brightness' is in trigger.event.data.service_data }}"
        - "{{ not 'brightness_pct' is in trigger.event.data.service_data }}"
        - "{{ not 'brightness_step' is in trigger.event.data.service_data }}"
        - "{{ not 'brightness_step_pct' is in trigger.event.data.service_data }}"
        sequence:
        - service: light.turn_on
          data:
            transition: 0
          data_template:
            brightness: "{{ light_setting_current_brightness }}"
          target:
            entity_id: "{{ trigger.event.data.service_data.entity_id }}"
    - choose:
      - conditions:
        - "{{ not 'color_temp' is in trigger.event.data.service_data }}"
        - "{{ not 'rgb_color' is in trigger.event.data.service_data }}"
        - "{{ not 'rgbw_color' is in trigger.event.data.service_data }}"
        - "{{ not 'rgbww_color' is in trigger.event.data.service_data }}"
        - "{{ not 'color_name' is in trigger.event.data.service_data }}"
        - "{{ not 'hs_color' is in trigger.event.data.service_data }}"
        - "{{ not 'xy_color' is in trigger.event.data.service_data }}"
        - "{{ not 'kelvin' is in trigger.event.data.service_data }}"
        - "{{ not 'rgb_color' is in trigger.event.data.service_data }}"
        sequence:
        - service: light.turn_on
          data:
            transition: 0
          data_template:
            color_temp: "{{ light_setting_current_temperature }}"
          target:
            entity_id: "{{ trigger.event.data.service_data.entity_id }}"
  - conditions: "{{ trigger.idx == 'Test' }}"
    sequence:
    - repeat:
        count: 2
        sequence:
        - service: light.turn_on
          data:
            transition: 1
          data_template:
            color_temp: "{{ light_setting_current_temperature }}"
            brightness: "{{ light_setting_current_brightness }}"
          target:
            entity_id: !input lights
        - delay: 1
