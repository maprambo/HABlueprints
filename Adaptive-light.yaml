blueprint:
  name: "Adaptive Lighting"
  domain: automation
  description: "Light to follow natural cycle"
  input:
    sunrise_time:
      name: "Sunrise time"
      selector:
        time:
    sunset_time:
      name: "Sunset time"
      selector:
        time:
    lights:
      name: "Target lights"
      selector:
        entity:
          domain: light
          multiple: true
    brightness_midday:
      name: "Brightness at midday"
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider
          step: 1
      default: 100
    brightness_midnight:
      name: "Brightness at midnight"
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider
          step: 1
      default: 2
    temperature_midday:
      name: "Temperature at midday"
      selector:
        number:
          min: 153
          max: 500
          unit_of_measurement: "Mireds"
          mode: slider
          step: 1
      default: 153
    temperature_midnight:
      name: "Temperature at midnight"
      selector:
        number:
          min: 153
          max: 500
          unit_of_measurement: "Mireds"
          mode: slider
          step: 1
      default: 500
    brightness_factor:
      name: "Brightness factor"
      description: "Factor for brightness throughout the day"
      selector:
        number:
          min: 1.0
          max: 3.0
          mode: slider
          step: 0.01
      default: 1.05
mode: restart
trigger:
  - id: "time_pattern"
    platform: time_pattern
    minutes: "/1"
variables:
  lights: !input lights
  brightness_midday: !input brightness_midday
  brightness_midnight: !input brightness_midnight
  temperature_midday: !input temperature_midday
  temperature_midnight: !input temperature_midnight
  brightness_factor: !input brightness_factor
  sunrise: !input sunrise_time
  sunset: !input sunset_time
  interval_sec: 60
  params_day_length: (today_at(sunset) - today_at(sunrise)).seconds / (24*60*60)
  params_x_sunrise: (today_at(sunrise) - today_at('00:00:00')).seconds / (24*60*60)
  params_meridian: params.x_sunrise + (params.day_length / 2)
  params_x: (now() - today_at('00:00:00')).seconds / (24*60*60)
  params_x_old: params.x - (interval_sec / (24*60*60))
  params_c: -0.5 * cos(2*pi*(params_day_length/2))
  params_y: 0.5 * cos(2*pi*(params_x - params_meridian)) + params_c + 0.5
  params_y_old: 0.5 * cos(2*pi*(params_x_old - params_meridian)) + params_c + 0.5
  params_y: params_y if params_y > 0 else 0
  params_y: params_y if params_y < 1 else 1
  params_y_product: params_y * brightness_factor
  params_y_product: params_y_product if params_y_product < 1 else 1
  params_y_old: params_y_old if params_y_old > 0 else 0
  params_y_old: params_y_old if params_y_old < 1 else 1
  params_y_old_product: params_y_old * brightness_factor
  params_y_old_product: params_y_old_product if params_y_old_product < 1 else 1
  light_setting_current_brightness: (params_y_product * (brightness_midday - brightness_midnight) + brightness_midnight) * 255 | int
  light_setting_current_temperature: (temperature_midnight - params_y * (temperature_midnight - temperature_midday)) | int
  light_setting_old_brightness: (params_y_old_product * (brightness_midday - brightness_midnight) + brightness_midnight) * 255 | int
  light_setting_old_temperature: (temperature_midnight - params_y_old * (temperature_midnight - temperature_midday)) | int
  targets_brightness: >
    {%- set targets = lights %}
    {%- set targets = [targets] if targets is string else targets %}
    {%- for target in targets %}
    {%- if states(target) == 'on' %}
    {%- if not not state_attr(target, 'brightness') and state_attr(target, 'brightness') > light_setting_old_brightness - 1 and state_attr(target, 'brightness') < light_setting_current_brightness + 1 %}
    {%- set target_entities_brightness = target_entities_brightness + [target] %}
    {%- endif %}
    {%- if not not state_attr(target, 'color_temp') and state_attr(target, 'color_temp') > light_setting_old_temperature - 1 and state_attr(target, 'color_temp') < light_setting_current_temperature + 1 %}
    {%- set target_entities_temperature = target_entities_temperature + [target] %}
    {%- endif %}
    {%- endif %}
    {%- endfor %}
    {{ target_entities_brightness }}
  targets_temperature: >
    {%- set targets = lights %}
    {%- set targets = [targets] if targets is string else targets %}
    {%- for target in targets %}
    {%- if states(target) == 'on' %}
    {%- if not not state_attr(target, 'color_temp') and state_attr(target, 'color_temp') > light_setting_old_temperature - 1 and state_attr(target, 'color_temp') < light_setting_current_temperature + 1 %}
    {%- set target_entities_temperature = target_entities_temperature + [target] %}
    {%- endif %}
    {%- endif %}
    {%- endfor %}
    {{ target_entities_temperature }}
action:
- choose:
  - conditions:
    - condition: or
      conditions:
      - condition: and
        conditions:
        - "{{ trigger.id == 'time_pattern' }}"
    sequence:
    - service: light.turn_on
      data:
        transition: 10
      data_template:
        brightness: "{{ light_setting_current_brightness }}"
      target:
        entity_id: "{{ targets_brightness }}"
    - service: light.turn_on
      data:
        transition: 10
      data_template:
        color_temp: "{{ light_setting_current_temperature }}"
      target:
        entity_id: "{{ targets_temperature }}"
  default:
    - repeat:
        count: 2
        sequence:
        - service: light.turn_on
          data:
            transition: 1
          data_template:
            color_temp: "{{ light_setting_current_temperature }}"
            brightness: "{{ light_setting_current_brightness }}"
          target:
            entity_id: !input lights
